- name: appname
  hosts: localhost
  become: true
  gather_facts: true
  vars:
    - app_name: Appname
    - app_dir: /path/to/app/directory
    - ser_dir: path/to/servicefile
  #creating task for ansible to start action
  # CREATING TIMESTAMP FOR SERVICE TO STORE TIME AND DATE
  tasks:
    - name: Collect current timestamp
      shell: date +%d%b%y_%H-%M-%S
      register: timestamp
# creating backup service folder for any mishappening on server
    - name: create folder
      shell: mkdir /path/to/backup/directory-{{ timestamp.stdout}}
# copying service folder to backup folder for security with timestamp to verify and easy to find the service folder
# giving root privileges to copy 
    - name: Copy file to server
      shell: cp -rf /path/to/app/directory/* /path/to/backup/directory-{{ timestamp.stdout }}
      become: yes
      become_user: root
# reassuring if directory exists after 
    - name: Ensure directory exits
      file:
        path: /path/to/app/directory
        state: directory
# unarchiving  all artifacts from zip file while excluding appsetting
    - name: Unarchive
      unarchive:
        src: /path/to/app/artifacts
        dest: /path/to/app/directory
        exclude:
          - appsettings.json
          - appsettings.Development.json
        remote_src: yes
# checking if daemon service file exists 
    - name: Check if the service file exists
      stat:
        path: /path/to/servicefile/directory
      register: service_file_stat

# now using jinja template to copy the system service file, if it exist then it will skip  it
    - name: Create appname service using Jinja2
      template:
        src: Template-dotnet.j2
        dest: /path/to/servicefile/directory
      when: not service_file_stat.stat.exists
# this will enable and start service file also restart it
    - name: start appname API on Staging
      systemd:
        name: appname
        state: restarted
        enabled: yes
      become: yes
      become_user: root